

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu Jun 04 01:34:09 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    10                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    11  0000                     
    12                           ; Version 2.10
    13                           ; Generated 31/07/2019 GMT
    14                           ; 
    15                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    16                           ; All rights reserved.
    17                           ; 
    18                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    19                           ; 
    20                           ; Redistribution and use in source and binary forms, with or without modification, are
    21                           ; permitted provided that the following conditions are met:
    22                           ; 
    23                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    24                           ;        conditions and the following disclaimer.
    25                           ; 
    26                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    27                           ;        of conditions and the following disclaimer in the documentation and/or other
    28                           ;        materials provided with the distribution.
    29                           ; 
    30                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    31                           ;        software without specific prior written permission.
    32                           ; 
    33                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    34                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    35                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    36                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    37                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    38                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    39                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    40                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    41                           ; 
    42                           ; 
    43                           ; Code-generator required, PIC18F4550 Definitions
    44                           ; 
    45                           ; SFR Addresses
    46  0000                     _TRISBbits	set	3987
    47  0000                     _PORTBbits	set	3969
    48  0000                     _LATBbits	set	3978
    49                           
    50                           ; #config settings
    51  0000                     
    52                           	psect	cinit
    53  007EF6                     __pcinit:
    54                           	opt callstack 0
    55  007EF6                     start_initialization:
    56                           	opt callstack 0
    57  007EF6                     __initialization:
    58                           	opt callstack 0
    59  007EF6                     end_of_initialization:
    60                           	opt callstack 0
    61  007EF6                     __end_of__initialization:
    62                           	opt callstack 0
    63  007EF6  0100               	movlb	0
    64  007EF8  EF82  F03F         	goto	_main	;jump to C main() function
    65                           
    66                           	psect	cstackCOMRAM
    67  000001                     __pcstackCOMRAM:
    68                           	opt callstack 0
    69  000001                     ??_main:
    70                           
    71                           ; 1 bytes @ 0x0
    72  000001                     	ds	1
    73  000002                     main@counter:
    74                           	opt callstack 0
    75                           
    76                           ; 2 bytes @ 0x1
    77  000002                     	ds	2
    78  000004                     main@variableRandonDeCuentaXD:
    79                           	opt callstack 0
    80                           
    81                           ; 2 bytes @ 0x3
    82  000004                     	ds	2
    83                           
    84 ;;
    85 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
    86 ;;
    87 ;; *************** function _main *****************
    88 ;; Defined at:
    89 ;;		line 23 in file "main.c"
    90 ;; Parameters:    Size  Location     Type
    91 ;;		None
    92 ;; Auto vars:     Size  Location     Type
    93 ;;  variableRand    2    3[COMRAM] int 
    94 ;;  counter         2    1[COMRAM] int 
    95 ;; Return value:  Size  Location     Type
    96 ;;                  1    wreg      void 
    97 ;; Registers used:
    98 ;;		wreg, status,2, status,0, cstack
    99 ;; Tracked objects:
   100 ;;		On entry : 0/0
   101 ;;		On exit  : 0/0
   102 ;;		Unchanged: 0/0
   103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   104 ;;      Params:         0       0       0       0       0       0       0       0       0
   105 ;;      Locals:         4       0       0       0       0       0       0       0       0
   106 ;;      Temps:          1       0       0       0       0       0       0       0       0
   107 ;;      Totals:         5       0       0       0       0       0       0       0       0
   108 ;;Total ram usage:        5 bytes
   109 ;; Hardware stack levels required when called:    1
   110 ;; This function calls:
   111 ;;		_limpiaPuertos
   112 ;; This function is called by:
   113 ;;		Startup code after reset
   114 ;; This function uses a non-reentrant model
   115 ;;
   116                           
   117                           	psect	text0
   118  007F04                     __ptext0:
   119                           	opt callstack 0
   120  007F04                     _main:
   121                           	opt callstack 30
   122  007F04                     
   123                           ;main.c: 25:     limpiaPuertos();
   124  007F04  EC7E  F03F         	call	_limpiaPuertos	;wreg free
   125  007F08                     
   126                           ;main.c: 26:     counter = 100;
   127  007F08  0E00               	movlw	0
   128  007F0A  6E03               	movwf	(main@counter+1)^0,c
   129  007F0C  0E64               	movlw	100
   130  007F0E  6E02               	movwf	main@counter^0,c
   131  007F10                     l715:
   132                           
   133                           ;main.c: 28:     for (variableRandonDeCuentaXD = 0; variableRandonDeCuentaXD <= 400; var
      +                          iableRandonDeCuentaXD++) {
   134  007F10  0E00               	movlw	0
   135  007F12  6E05               	movwf	(main@variableRandonDeCuentaXD+1)^0,c
   136  007F14  0E00               	movlw	0
   137  007F16  6E04               	movwf	main@variableRandonDeCuentaXD^0,c
   138  007F18                     l721:
   139                           
   140                           ;main.c: 29:         if (variableRandonDeCuentaXD <= counter) {
   141  007F18  5004               	movf	main@variableRandonDeCuentaXD^0,w,c
   142  007F1A  5C02               	subwf	main@counter^0,w,c
   143  007F1C  5003               	movf	(main@counter+1)^0,w,c
   144  007F1E  0A80               	xorlw	128
   145  007F20  6E01               	movwf	??_main^0,c
   146  007F22  5005               	movf	(main@variableRandonDeCuentaXD+1)^0,w,c
   147  007F24  0A80               	xorlw	128
   148  007F26  5801               	subwfb	??_main^0,w,c
   149  007F28  A0D8               	btfss	status,0,c
   150  007F2A  EF99  F03F         	goto	u11
   151  007F2E  EF9B  F03F         	goto	u10
   152  007F32                     u11:
   153  007F32  EF9E  F03F         	goto	l18
   154  007F36                     u10:
   155  007F36                     
   156                           ;main.c: 30:             LATBbits.LATB0 = 1;
   157  007F36  808A               	bsf	138,0,c	;volatile
   158                           
   159                           ;main.c: 31:         } else {
   160  007F38  EF9F  F03F         	goto	l19
   161  007F3C                     l18:
   162                           
   163                           ;main.c: 32:             LATBbits.LATB0 = 0;
   164  007F3C  908A               	bcf	138,0,c	;volatile
   165  007F3E                     l19:
   166                           
   167                           ;main.c: 34:         if (PORTBbits.RB1 == 1 && PORTBbits.RB2 == 0) {
   168  007F3E  A281               	btfss	129,1,c	;volatile
   169  007F40  EFA4  F03F         	goto	u21
   170  007F44  EFA6  F03F         	goto	u20
   171  007F48                     u21:
   172  007F48  EFC7  F03F         	goto	l20
   173  007F4C                     u20:
   174  007F4C  B481               	btfsc	129,2,c	;volatile
   175  007F4E  EFAB  F03F         	goto	u31
   176  007F52  EFAD  F03F         	goto	u30
   177  007F56                     u31:
   178  007F56  EFC7  F03F         	goto	l20
   179  007F5A                     u30:
   180  007F5A                     
   181                           ;main.c: 35:             if (counter <= 250) {
   182  007F5A  BE03               	btfsc	(main@counter+1)^0,7,c
   183  007F5C  EFBB  F03F         	goto	u40
   184  007F60  5003               	movf	(main@counter+1)^0,w,c
   185  007F62  E107               	bnz	u41
   186  007F64  0EFB               	movlw	251
   187  007F66  5C02               	subwf	main@counter^0,w,c
   188  007F68  B0D8               	btfsc	status,0,c
   189  007F6A  EFB9  F03F         	goto	u41
   190  007F6E  EFBB  F03F         	goto	u40
   191  007F72                     u41:
   192  007F72  EFE8  F03F         	goto	l741
   193  007F76                     u40:
   194  007F76                     
   195                           ;main.c: 36:                 counter++;
   196  007F76  4A02               	infsnz	main@counter^0,f,c
   197  007F78  2A03               	incf	(main@counter+1)^0,f,c
   198  007F7A                     l731:
   199                           
   200                           ;main.c: 37:                 _delay((unsigned long)((10)*(20000000/4000.0)));
   201  007F7A  0E41               	movlw	65
   202  007F7C  6E01               	movwf	??_main^0,c
   203  007F7E  0EEE               	movlw	238
   204  007F80                     u97:
   205  007F80  2EE8               	decfsz	wreg,f,c
   206  007F82  D7FE               	bra	u97
   207  007F84  2E01               	decfsz	??_main^0,f,c
   208  007F86  D7FC               	bra	u97
   209  007F88  D000               	nop2	
   210                           
   211                           ;main.c: 38:             } else {
   212  007F8A  EFE8  F03F         	goto	l741
   213  007F8E                     l20:
   214                           
   215                           ;main.c: 42:             if (PORTBbits.RB1 == 0 && PORTBbits.RB2 == 1) {
   216  007F8E  B281               	btfsc	129,1,c	;volatile
   217  007F90  EFCC  F03F         	goto	u51
   218  007F94  EFCE  F03F         	goto	u50
   219  007F98                     u51:
   220  007F98  EFE8  F03F         	goto	l741
   221  007F9C                     u50:
   222  007F9C  A481               	btfss	129,2,c	;volatile
   223  007F9E  EFD3  F03F         	goto	u61
   224  007FA2  EFD5  F03F         	goto	u60
   225  007FA6                     u61:
   226  007FA6  EFE8  F03F         	goto	l741
   227  007FAA                     u60:
   228  007FAA                     
   229                           ;main.c: 43:                 if (counter >= 50) {
   230  007FAA  BE03               	btfsc	(main@counter+1)^0,7,c
   231  007FAC  EFE1  F03F         	goto	u71
   232  007FB0  5003               	movf	(main@counter+1)^0,w,c
   233  007FB2  E109               	bnz	u70
   234  007FB4  0E32               	movlw	50
   235  007FB6  5C02               	subwf	main@counter^0,w,c
   236  007FB8  A0D8               	btfss	status,0,c
   237  007FBA  EFE1  F03F         	goto	u71
   238  007FBE  EFE3  F03F         	goto	u70
   239  007FC2                     u71:
   240  007FC2  EFE8  F03F         	goto	l741
   241  007FC6                     u70:
   242  007FC6                     
   243                           ;main.c: 44:                     counter--;
   244  007FC6  0602               	decf	main@counter^0,f,c
   245  007FC8  A0D8               	btfss	status,0,c
   246  007FCA  0603               	decf	(main@counter+1)^0,f,c
   247  007FCC  EFBD  F03F         	goto	l731
   248  007FD0                     l741:
   249                           
   250                           ;main.c: 53:         _delay((unsigned long)((50)*(20000000/4000000.0)));
   251  007FD0  0E53               	movlw	83
   252  007FD2                     u107:
   253  007FD2  2EE8               	decfsz	wreg,f,c
   254  007FD4  D7FE               	bra	u107
   255  007FD6  F000               	nop	
   256  007FD8                     
   257                           ;main.c: 54:     }
   258  007FD8  4A04               	infsnz	main@variableRandonDeCuentaXD^0,f,c
   259  007FDA  2A05               	incf	(main@variableRandonDeCuentaXD+1)^0,f,c
   260  007FDC  BE05               	btfsc	(main@variableRandonDeCuentaXD+1)^0,7,c
   261  007FDE  EFFA  F03F         	goto	u81
   262  007FE2  0E91               	movlw	145
   263  007FE4  5C04               	subwf	main@variableRandonDeCuentaXD^0,w,c
   264  007FE6  0E01               	movlw	1
   265  007FE8  5805               	subwfb	(main@variableRandonDeCuentaXD+1)^0,w,c
   266  007FEA  A0D8               	btfss	status,0,c
   267  007FEC  EFFA  F03F         	goto	u81
   268  007FF0  EFFC  F03F         	goto	u80
   269  007FF4                     u81:
   270  007FF4  EF8C  F03F         	goto	l721
   271  007FF8                     u80:
   272  007FF8  EF88  F03F         	goto	l715
   273  007FFC  EF00  F000         	goto	start
   274  008000                     __end_of_main:
   275                           	opt callstack 0
   276                           
   277 ;; *************** function _limpiaPuertos *****************
   278 ;; Defined at:
   279 ;;		line 59 in file "main.c"
   280 ;; Parameters:    Size  Location     Type
   281 ;;		None
   282 ;; Auto vars:     Size  Location     Type
   283 ;;		None
   284 ;; Return value:  Size  Location     Type
   285 ;;                  1    wreg      void 
   286 ;; Registers used:
   287 ;;		None
   288 ;; Tracked objects:
   289 ;;		On entry : 0/0
   290 ;;		On exit  : 0/0
   291 ;;		Unchanged: 0/0
   292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   293 ;;      Params:         0       0       0       0       0       0       0       0       0
   294 ;;      Locals:         0       0       0       0       0       0       0       0       0
   295 ;;      Temps:          0       0       0       0       0       0       0       0       0
   296 ;;      Totals:         0       0       0       0       0       0       0       0       0
   297 ;;Total ram usage:        0 bytes
   298 ;; Hardware stack levels used:    1
   299 ;; This function calls:
   300 ;;		Nothing
   301 ;; This function is called by:
   302 ;;		_main
   303 ;; This function uses a non-reentrant model
   304 ;;
   305                           
   306                           	psect	text1
   307  007EFC                     __ptext1:
   308                           	opt callstack 0
   309  007EFC                     _limpiaPuertos:
   310                           	opt callstack 30
   311  007EFC                     
   312                           ;main.c: 60:     TRISBbits.RB0 = 0;
   313  007EFC  9093               	bcf	147,0,c	;volatile
   314                           
   315                           ;main.c: 61:     TRISBbits.RB1 = 1;
   316  007EFE  8293               	bsf	147,1,c	;volatile
   317                           
   318                           ;main.c: 62:     TRISBbits.RB2 = 1;
   319  007F00  8493               	bsf	147,2,c	;volatile
   320  007F02  0012               	return		;funcret
   321  007F04                     __end_of_limpiaPuertos:
   322                           	opt callstack 0
   323  0000                     
   324                           	psect	rparam
   325  0000                     tosu	equ	0xFFF
   326                           tosh	equ	0xFFE
   327                           tosl	equ	0xFFD
   328                           stkptr	equ	0xFFC
   329                           pclatu	equ	0xFFB
   330                           pclath	equ	0xFFA
   331                           pcl	equ	0xFF9
   332                           tblptru	equ	0xFF8
   333                           tblptrh	equ	0xFF7
   334                           tblptrl	equ	0xFF6
   335                           tablat	equ	0xFF5
   336                           prodh	equ	0xFF4
   337                           prodl	equ	0xFF3
   338                           indf0	equ	0xFEF
   339                           postinc0	equ	0xFEE
   340                           postdec0	equ	0xFED
   341                           preinc0	equ	0xFEC
   342                           plusw0	equ	0xFEB
   343                           fsr0h	equ	0xFEA
   344                           fsr0l	equ	0xFE9
   345                           wreg	equ	0xFE8
   346                           indf1	equ	0xFE7
   347                           postinc1	equ	0xFE6
   348                           postdec1	equ	0xFE5
   349                           preinc1	equ	0xFE4
   350                           plusw1	equ	0xFE3
   351                           fsr1h	equ	0xFE2
   352                           fsr1l	equ	0xFE1
   353                           bsr	equ	0xFE0
   354                           indf2	equ	0xFDF
   355                           postinc2	equ	0xFDE
   356                           postdec2	equ	0xFDD
   357                           preinc2	equ	0xFDC
   358                           plusw2	equ	0xFDB
   359                           fsr2h	equ	0xFDA
   360                           fsr2l	equ	0xFD9
   361                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      5       5
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0      90
                                              0 COMRAM     5     5      0
                      _limpiaPuertos
 ---------------------------------------------------------------------------------
 (1) _limpiaPuertos                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _limpiaPuertos

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      5       5       1        5.3%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu Jun 04 01:34:09 2020

                          l20 7F8E                            l31 7F02                            l18 7F3C  
                          l19 7F3E                            u10 7F36                            u11 7F32  
                          u20 7F4C                            u21 7F48                            u30 7F5A  
                          u31 7F56                            u40 7F76                            u41 7F72  
                          u50 7F9C                            u51 7F98                            u60 7FAA  
                          u61 7FA6                            u70 7FC6                            u71 7FC2  
                          u80 7FF8                            u81 7FF4                            u97 7F80  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                           l711 7F04  
                         l721 7F18                           l713 7F08                           l707 7EFC  
                         l731 7F7A                           l723 7F36                           l715 7F10  
                         l733 7F9C                           l741 7FD0                           l725 7F4C  
                         l709 7F04                           l743 7FD8                           l735 7FAA  
                         l727 7F5A                           l737 7FC6                           l729 7F76  
                __CFG_CPB$OFF 000000                           u107 7FD2                  __CFG_CPD$OFF 000000  
                __CFG_BOR$OFF 000000                           wreg 000FE8                  __CFG_FOSC$HS 000000  
                __CFG_LVP$OFF 000000                  __CFG_WDT$OFF 000000                   main@counter 0002  
                        _main 7F04                          start 0000                 __CFG_IESO$OFF 000000  
               __CFG_MCLRE$ON 000000                  ___param_bank 000000                 __CFG_PLLDIV$1 000000  
                       ?_main 0001                 __CFG_USBDIV$1 000000                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
              __CFG_EBTRB$OFF 000000                         status 000FD8                __CFG_ICPRT$OFF 000000  
             __initialization 7EF6                  __end_of_main 8000                        ??_main 0001  
               __activetblptr 000000               __CFG_CCP2MX$OFF 000000                __CFG_XINST$OFF 000000  
                  __accesstop 0060       __end_of__initialization 7EF6               __CFG_PBADEN$OFF 000000  
               ___rparam_used 000001                __pcstackCOMRAM 0001        __size_of_limpiaPuertos 0008  
               _limpiaPuertos 7EFC               __CFG_VREGEN$OFF 000000                       __Hparam 0000  
                     __Lparam 0000               __CFG_STVREN$OFF 000000                       __pcinit 7EF6  
                     __ramtop 0800                       __ptext0 7F04                       __ptext1 7EFC  
              ?_limpiaPuertos 0001          end_of_initialization 7EF6                     _PORTBbits 000F81  
main@variableRandonDeCuentaXD 0004                     _TRISBbits 000F93           start_initialization 7EF6  
             ??_limpiaPuertos 0001              __CFG_LPT1OSC$OFF 000000                      _LATBbits 000F8A  
            __CFG_WDTPS$32768 000000                      __Hrparam 0000                      __Lrparam 0000  
               __size_of_main 00FC         __CFG_CPUDIV$OSC1_PLL2 000000         __end_of_limpiaPuertos 7F04  
