

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu Jun 04 13:25:12 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    10                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    11  0000                     
    12                           ; Version 2.10
    13                           ; Generated 31/07/2019 GMT
    14                           ; 
    15                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    16                           ; All rights reserved.
    17                           ; 
    18                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    19                           ; 
    20                           ; Redistribution and use in source and binary forms, with or without modification, are
    21                           ; permitted provided that the following conditions are met:
    22                           ; 
    23                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    24                           ;        conditions and the following disclaimer.
    25                           ; 
    26                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    27                           ;        of conditions and the following disclaimer in the documentation and/or other
    28                           ;        materials provided with the distribution.
    29                           ; 
    30                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    31                           ;        software without specific prior written permission.
    32                           ; 
    33                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    34                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    35                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    36                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    37                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    38                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    39                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    40                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    41                           ; 
    42                           ; 
    43                           ; Code-generator required, PIC18F4550 Definitions
    44                           ; 
    45                           ; SFR Addresses
    46  0000                     _TRISBbits	set	3987
    47  0000                     _PORTBbits	set	3969
    48  0000                     _LATBbits	set	3978
    49                           
    50                           ; #config settings
    51  0000                     
    52                           	psect	cinit
    53  007EEA                     __pcinit:
    54                           	opt callstack 0
    55  007EEA                     start_initialization:
    56                           	opt callstack 0
    57  007EEA                     __initialization:
    58                           	opt callstack 0
    59  007EEA                     end_of_initialization:
    60                           	opt callstack 0
    61  007EEA                     __end_of__initialization:
    62                           	opt callstack 0
    63  007EEA  0100               	movlb	0
    64  007EEC  EF7C  F03F         	goto	_main	;jump to C main() function
    65                           
    66                           	psect	cstackCOMRAM
    67  000001                     __pcstackCOMRAM:
    68                           	opt callstack 0
    69  000001                     ??_main:
    70                           
    71                           ; 1 bytes @ 0x0
    72  000001                     	ds	1
    73  000002                     main@counter:
    74                           	opt callstack 0
    75                           
    76                           ; 2 bytes @ 0x1
    77  000002                     	ds	2
    78  000004                     main@variableRandonDeCuentaXD:
    79                           	opt callstack 0
    80                           
    81                           ; 2 bytes @ 0x3
    82  000004                     	ds	2
    83                           
    84 ;;
    85 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
    86 ;;
    87 ;; *************** function _main *****************
    88 ;; Defined at:
    89 ;;		line 23 in file "main.c"
    90 ;; Parameters:    Size  Location     Type
    91 ;;		None
    92 ;; Auto vars:     Size  Location     Type
    93 ;;  variableRand    2    3[COMRAM] int 
    94 ;;  counter         2    1[COMRAM] int 
    95 ;; Return value:  Size  Location     Type
    96 ;;                  1    wreg      void 
    97 ;; Registers used:
    98 ;;		wreg, status,2, status,0, cstack
    99 ;; Tracked objects:
   100 ;;		On entry : 0/0
   101 ;;		On exit  : 0/0
   102 ;;		Unchanged: 0/0
   103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   104 ;;      Params:         0       0       0       0       0       0       0       0       0
   105 ;;      Locals:         4       0       0       0       0       0       0       0       0
   106 ;;      Temps:          1       0       0       0       0       0       0       0       0
   107 ;;      Totals:         5       0       0       0       0       0       0       0       0
   108 ;;Total ram usage:        5 bytes
   109 ;; Hardware stack levels required when called:    1
   110 ;; This function calls:
   111 ;;		_limpiaPuertos
   112 ;; This function is called by:
   113 ;;		Startup code after reset
   114 ;; This function uses a non-reentrant model
   115 ;;
   116                           
   117                           	psect	text0
   118  007EF8                     __ptext0:
   119                           	opt callstack 0
   120  007EF8                     _main:
   121                           	opt callstack 30
   122  007EF8                     
   123                           ;main.c: 25:     limpiaPuertos();
   124  007EF8  EC78  F03F         	call	_limpiaPuertos	;wreg free
   125  007EFC                     
   126                           ;main.c: 26:     counter = 22;
   127  007EFC  0E00               	movlw	0
   128  007EFE  6E03               	movwf	(main@counter+1)^0,c
   129  007F00  0E16               	movlw	22
   130  007F02  6E02               	movwf	main@counter^0,c
   131  007F04                     l719:
   132                           
   133                           ;main.c: 28:     for (variableRandonDeCuentaXD = 0; variableRandonDeCuentaXD <= 400; var
      +                          iableRandonDeCuentaXD++) {
   134  007F04  0E00               	movlw	0
   135  007F06  6E05               	movwf	(main@variableRandonDeCuentaXD+1)^0,c
   136  007F08  0E00               	movlw	0
   137  007F0A  6E04               	movwf	main@variableRandonDeCuentaXD^0,c
   138  007F0C                     l725:
   139                           
   140                           ;main.c: 29:         if (variableRandonDeCuentaXD <= counter) {
   141  007F0C  5004               	movf	main@variableRandonDeCuentaXD^0,w,c
   142  007F0E  5C02               	subwf	main@counter^0,w,c
   143  007F10  5003               	movf	(main@counter+1)^0,w,c
   144  007F12  0A80               	xorlw	128
   145  007F14  6E01               	movwf	??_main^0,c
   146  007F16  5005               	movf	(main@variableRandonDeCuentaXD+1)^0,w,c
   147  007F18  0A80               	xorlw	128
   148  007F1A  5801               	subwfb	??_main^0,w,c
   149  007F1C  A0D8               	btfss	status,0,c
   150  007F1E  EF93  F03F         	goto	u11
   151  007F22  EF95  F03F         	goto	u10
   152  007F26                     u11:
   153  007F26  EF98  F03F         	goto	l18
   154  007F2A                     u10:
   155  007F2A                     
   156                           ;main.c: 30:             LATBbits.LATB0 = 1;
   157  007F2A  808A               	bsf	138,0,c	;volatile
   158                           
   159                           ;main.c: 31:         } else {
   160  007F2C  EF99  F03F         	goto	l19
   161  007F30                     l18:
   162                           
   163                           ;main.c: 32:             LATBbits.LATB0 = 0;
   164  007F30  908A               	bcf	138,0,c	;volatile
   165  007F32                     l19:
   166                           
   167                           ;main.c: 34:         if (PORTBbits.RB1 == 1 && PORTBbits.RB2 == 0) {
   168  007F32  A281               	btfss	129,1,c	;volatile
   169  007F34  EF9E  F03F         	goto	u21
   170  007F38  EFA0  F03F         	goto	u20
   171  007F3C                     u21:
   172  007F3C  EFC0  F03F         	goto	l20
   173  007F40                     u20:
   174  007F40  B481               	btfsc	129,2,c	;volatile
   175  007F42  EFA5  F03F         	goto	u31
   176  007F46  EFA7  F03F         	goto	u30
   177  007F4A                     u31:
   178  007F4A  EFC0  F03F         	goto	l20
   179  007F4E                     u30:
   180  007F4E                     
   181                           ;main.c: 35:             if (counter <= 50) {
   182  007F4E  BE03               	btfsc	(main@counter+1)^0,7,c
   183  007F50  EFB5  F03F         	goto	u40
   184  007F54  5003               	movf	(main@counter+1)^0,w,c
   185  007F56  E107               	bnz	u41
   186  007F58  0E33               	movlw	51
   187  007F5A  5C02               	subwf	main@counter^0,w,c
   188  007F5C  B0D8               	btfsc	status,0,c
   189  007F5E  EFB3  F03F         	goto	u41
   190  007F62  EFB5  F03F         	goto	u40
   191  007F66                     u41:
   192  007F66  EFB7  F03F         	goto	l23
   193  007F6A                     u40:
   194  007F6A                     
   195                           ;main.c: 36:                 counter++;
   196  007F6A  4A02               	infsnz	main@counter^0,f,c
   197  007F6C  2A03               	incf	(main@counter+1)^0,f,c
   198  007F6E                     l23:
   199                           
   200                           ;main.c: 41:             if (PORTBbits.RB1 == 1) goto SEN;
   201  007F6E  A281               	btfss	129,1,c	;volatile
   202  007F70  EFBC  F03F         	goto	u51
   203  007F74  EFBE  F03F         	goto	u50
   204  007F78                     u51:
   205  007F78  EFE8  F03F         	goto	l745
   206  007F7C                     u50:
   207  007F7C  EFB7  F03F         	goto	l23
   208  007F80                     l20:
   209                           
   210                           ;main.c: 43:             if (PORTBbits.RB1 == 0 && PORTBbits.RB2 == 1) {
   211  007F80  B281               	btfsc	129,1,c	;volatile
   212  007F82  EFC5  F03F         	goto	u61
   213  007F86  EFC7  F03F         	goto	u60
   214  007F8A                     u61:
   215  007F8A  EFE8  F03F         	goto	l745
   216  007F8E                     u60:
   217  007F8E  A481               	btfss	129,2,c	;volatile
   218  007F90  EFCC  F03F         	goto	u71
   219  007F94  EFCE  F03F         	goto	u70
   220  007F98                     u71:
   221  007F98  EFE8  F03F         	goto	l745
   222  007F9C                     u70:
   223  007F9C                     
   224                           ;main.c: 44:                 if (counter >= 2) {
   225  007F9C  BE03               	btfsc	(main@counter+1)^0,7,c
   226  007F9E  EFDA  F03F         	goto	u81
   227  007FA2  5003               	movf	(main@counter+1)^0,w,c
   228  007FA4  E109               	bnz	u80
   229  007FA6  0E02               	movlw	2
   230  007FA8  5C02               	subwf	main@counter^0,w,c
   231  007FAA  A0D8               	btfss	status,0,c
   232  007FAC  EFDA  F03F         	goto	u81
   233  007FB0  EFDC  F03F         	goto	u80
   234  007FB4                     u81:
   235  007FB4  EFDF  F03F         	goto	l29
   236  007FB8                     u80:
   237  007FB8                     
   238                           ;main.c: 45:                     counter--;
   239  007FB8  0602               	decf	main@counter^0,f,c
   240  007FBA  A0D8               	btfss	status,0,c
   241  007FBC  0603               	decf	(main@counter+1)^0,f,c
   242  007FBE                     l29:
   243                           
   244                           ;main.c: 50:                 if (PORTBbits.RB2 == 1) goto SEN1;
   245  007FBE  A481               	btfss	129,2,c	;volatile
   246  007FC0  EFE4  F03F         	goto	u91
   247  007FC4  EFE6  F03F         	goto	u90
   248  007FC8                     u91:
   249  007FC8  EFE8  F03F         	goto	l745
   250  007FCC                     u90:
   251  007FCC  EFDF  F03F         	goto	l29
   252  007FD0                     l745:
   253                           
   254                           ;main.c: 56:         _delay((unsigned long)((50)*(20000000/4000000.0)));
   255  007FD0  0E53               	movlw	83
   256  007FD2                     u117:
   257  007FD2  2EE8               	decfsz	wreg,f,c
   258  007FD4  D7FE               	bra	u117
   259  007FD6  F000               	nop	
   260  007FD8                     
   261                           ;main.c: 57:     }
   262  007FD8  4A04               	infsnz	main@variableRandonDeCuentaXD^0,f,c
   263  007FDA  2A05               	incf	(main@variableRandonDeCuentaXD+1)^0,f,c
   264  007FDC  BE05               	btfsc	(main@variableRandonDeCuentaXD+1)^0,7,c
   265  007FDE  EFFA  F03F         	goto	u101
   266  007FE2  0E91               	movlw	145
   267  007FE4  5C04               	subwf	main@variableRandonDeCuentaXD^0,w,c
   268  007FE6  0E01               	movlw	1
   269  007FE8  5805               	subwfb	(main@variableRandonDeCuentaXD+1)^0,w,c
   270  007FEA  A0D8               	btfss	status,0,c
   271  007FEC  EFFA  F03F         	goto	u101
   272  007FF0  EFFC  F03F         	goto	u100
   273  007FF4                     u101:
   274  007FF4  EF86  F03F         	goto	l725
   275  007FF8                     u100:
   276  007FF8  EF82  F03F         	goto	l719
   277  007FFC  EF00  F000         	goto	start
   278  008000                     __end_of_main:
   279                           	opt callstack 0
   280                           
   281 ;; *************** function _limpiaPuertos *****************
   282 ;; Defined at:
   283 ;;		line 62 in file "main.c"
   284 ;; Parameters:    Size  Location     Type
   285 ;;		None
   286 ;; Auto vars:     Size  Location     Type
   287 ;;		None
   288 ;; Return value:  Size  Location     Type
   289 ;;                  1    wreg      void 
   290 ;; Registers used:
   291 ;;		None
   292 ;; Tracked objects:
   293 ;;		On entry : 0/0
   294 ;;		On exit  : 0/0
   295 ;;		Unchanged: 0/0
   296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   297 ;;      Params:         0       0       0       0       0       0       0       0       0
   298 ;;      Locals:         0       0       0       0       0       0       0       0       0
   299 ;;      Temps:          0       0       0       0       0       0       0       0       0
   300 ;;      Totals:         0       0       0       0       0       0       0       0       0
   301 ;;Total ram usage:        0 bytes
   302 ;; Hardware stack levels used:    1
   303 ;; This function calls:
   304 ;;		Nothing
   305 ;; This function is called by:
   306 ;;		_main
   307 ;; This function uses a non-reentrant model
   308 ;;
   309                           
   310                           	psect	text1
   311  007EF0                     __ptext1:
   312                           	opt callstack 0
   313  007EF0                     _limpiaPuertos:
   314                           	opt callstack 30
   315  007EF0                     
   316                           ;main.c: 63:     TRISBbits.RB0 = 0;
   317  007EF0  9093               	bcf	147,0,c	;volatile
   318                           
   319                           ;main.c: 64:     TRISBbits.RB1 = 1;
   320  007EF2  8293               	bsf	147,1,c	;volatile
   321                           
   322                           ;main.c: 65:     TRISBbits.RB2 = 1;
   323  007EF4  8493               	bsf	147,2,c	;volatile
   324  007EF6  0012               	return		;funcret
   325  007EF8                     __end_of_limpiaPuertos:
   326                           	opt callstack 0
   327  0000                     
   328                           	psect	rparam
   329  0000                     tosu	equ	0xFFF
   330                           tosh	equ	0xFFE
   331                           tosl	equ	0xFFD
   332                           stkptr	equ	0xFFC
   333                           pclatu	equ	0xFFB
   334                           pclath	equ	0xFFA
   335                           pcl	equ	0xFF9
   336                           tblptru	equ	0xFF8
   337                           tblptrh	equ	0xFF7
   338                           tblptrl	equ	0xFF6
   339                           tablat	equ	0xFF5
   340                           prodh	equ	0xFF4
   341                           prodl	equ	0xFF3
   342                           indf0	equ	0xFEF
   343                           postinc0	equ	0xFEE
   344                           postdec0	equ	0xFED
   345                           preinc0	equ	0xFEC
   346                           plusw0	equ	0xFEB
   347                           fsr0h	equ	0xFEA
   348                           fsr0l	equ	0xFE9
   349                           wreg	equ	0xFE8
   350                           indf1	equ	0xFE7
   351                           postinc1	equ	0xFE6
   352                           postdec1	equ	0xFE5
   353                           preinc1	equ	0xFE4
   354                           plusw1	equ	0xFE3
   355                           fsr1h	equ	0xFE2
   356                           fsr1l	equ	0xFE1
   357                           bsr	equ	0xFE0
   358                           indf2	equ	0xFDF
   359                           postinc2	equ	0xFDE
   360                           postdec2	equ	0xFDD
   361                           preinc2	equ	0xFDC
   362                           plusw2	equ	0xFDB
   363                           fsr2h	equ	0xFDA
   364                           fsr2l	equ	0xFD9
   365                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      5       5
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0      90
                                              0 COMRAM     5     5      0
                      _limpiaPuertos
 ---------------------------------------------------------------------------------
 (1) _limpiaPuertos                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _limpiaPuertos

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      5       5       1        5.3%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu Jun 04 13:25:12 2020

                          l20 7F80                            l23 7F6E                            l18 7F30  
                          l35 7EF6                            l19 7F32                            l29 7FBE  
                          u10 7F2A                            u11 7F26                            u20 7F40  
                          u21 7F3C                            u30 7F4E                            u31 7F4A  
                          u40 7F6A                            u41 7F66                            u50 7F7C  
                          u51 7F78                            u60 7F8E                            u61 7F8A  
                          u70 7F9C                            u71 7F98                            u80 7FB8  
                          u81 7FB4                            u90 7FCC                            u91 7FC8  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                           l711 7EF0  
                         l713 7EF8                           l731 7F4E                           l715 7EF8  
                         l741 7FB8                           l733 7F6A                           l725 7F0C  
                         l717 7EFC                           l727 7F2A                           l719 7F04  
                         l737 7F8E                           l745 7FD0                           l729 7F40  
                         l747 7FD8                           l739 7F9C                  __CFG_CPB$OFF 000000  
                         u100 7FF8                           u101 7FF4                           u117 7FD2  
                __CFG_CPD$OFF 000000                  __CFG_BOR$OFF 000000                           wreg 000FE8  
                __CFG_FOSC$HS 000000                  __CFG_LVP$OFF 000000                  __CFG_WDT$OFF 000000  
                 main@counter 0002                          _main 7EF8                          start 0000  
               __CFG_IESO$OFF 000000                 __CFG_MCLRE$ON 000000                  ___param_bank 000000  
               __CFG_PLLDIV$1 000000                         ?_main 0001                 __CFG_USBDIV$1 000000  
               __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000                         status 000FD8  
              __CFG_ICPRT$OFF 000000               __initialization 7EEA                  __end_of_main 8000  
                      ??_main 0001                 __activetblptr 000000               __CFG_CCP2MX$OFF 000000  
              __CFG_XINST$OFF 000000                    __accesstop 0060       __end_of__initialization 7EEA  
             __CFG_PBADEN$OFF 000000                 ___rparam_used 000001                __pcstackCOMRAM 0001  
      __size_of_limpiaPuertos 0008                 _limpiaPuertos 7EF0               __CFG_VREGEN$OFF 000000  
                     __Hparam 0000                       __Lparam 0000               __CFG_STVREN$OFF 000000  
                     __pcinit 7EEA                       __ramtop 0800                       __ptext0 7EF8  
                     __ptext1 7EF0                ?_limpiaPuertos 0001          end_of_initialization 7EEA  
                   _PORTBbits 000F81  main@variableRandonDeCuentaXD 0004                     _TRISBbits 000F93  
         start_initialization 7EEA               ??_limpiaPuertos 0001              __CFG_LPT1OSC$OFF 000000  
                    _LATBbits 000F8A              __CFG_WDTPS$32768 000000                      __Hrparam 0000  
                    __Lrparam 0000                 __size_of_main 0108         __CFG_CPUDIV$OSC1_PLL2 000000  
       __end_of_limpiaPuertos 7EF8  
